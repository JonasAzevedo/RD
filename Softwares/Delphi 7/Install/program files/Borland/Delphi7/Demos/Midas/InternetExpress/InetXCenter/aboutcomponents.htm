<!DOCTYPE HTML PUBLIC "-//SoftQuad Software//DTD HoTMetaL PRO 5.0::19981217::extensions to HTML 4.0//EN" "hmpro5.dtd">
 
<HTML>
 
<HEAD>
<TITLE></TITLE>
</HEAD>

<BODY>

<STYLE TYPE="text/css">
.intftitle {font-weight: bold}
.intfgrouptitle {font-weight: bold; font-size: larger}

</STYLE>

<P><A HREF="#PageProducer">TCustomerMidasPageProducer</A><BR>
<A HREF="#HTML">HTML Generation</A><BR>
<A HREF="#JavaScript">JavaScript Generation</A><BR>
<A HREF="#Interfaces">Interfaces</A><BR>
<A NAME="PageProducer"></A></P>
<H2>TCustomMidasPageProducer</H2>
<P> TCustomMidasPageProducer is a container for TComponent derived classes that
implement the <A HREF="#IWebComponent">IWebComponent</A> interface. Each
component may implement additional interfaces depending on the components
capabilities. When a request is made for the content of
TCustomMidasPageProducer, the child components are traversed. At this time,
components may generated JavaScript as well as HTML elements such as FORM,
TABLE, and INPUT.</P>
<H2><A NAME="HTML">HTML Generation</A></H2>
<P><A>Components that generate HTML implement the </A><A
HREF="#IWebContent">IWebContent</A> interface. For example, a
<A HREF="ComponentsList?ClassName=TFieldText"> TFieldText</A> component
generates an INPUT element. Container components are responsible for requesting
content from their children. </P>
<P>In order to control the layout of child components, container components
pass a layout object in each content request. Layout objects implement the
<A HREF="#ILayoutWebContent">ILayoutWebContent</A> interface. For example, the
<A HREF="ComponentsList?ClassName=TFieldGroup">TFieldGroup</A> component
arranges the labels and INPUT elements using a TABLE element.</P>
<P><A NAME="JavaScript"></A></P>
<H2>JavaScript Generation</H2>
<p>Components that generate JavaScript implement the <A HREF=#IScriptComponent>IScriptComponent</A> interface.  
Components call the <A HREF=#IAddScriptElements>IAddScriptElements</A> interface to add JavaScript variables, functions,
and so forth.  Components can find out about JavaScript generated by other components using the <A HREF=#IScriptManager>
IScriptManager</A> interface.</p>
<P><A> </A><A NAME="Interfaces"></A></P>
<H2>Interfaces</H2>
<P></P>
<DL>
</DL>
<P><A HREF="#Required">Required </A> </P>
<DL>
<DD> <A HREF="#IWebComponent">IWebComponent</A> </DD>
</DL>
<DL>
</DL>
<P><A HREF="#HTMLContent">HTML Content </A> </P>
<DL>
<DD><A HREF="#IWebContent">IWebContent</A> </DD>
<DD><A HREF="#ILayoutWebContent">ILayoutWebContent</A> </DD>
<DD><A HREF="#IHTMLForm">IHTMLForm</A> </DD>
<DD><A HREF="#IHTMLField">IHTMLField</A> </DD>
</DL>
<DL>
</DL>
<P><A HREF="#XMLDataAware">XML Data Aware </A> </P>
<DL>
<DD><A HREF="#IDataSetComponent">IDataSetComponent</A> </DD>
<DD><A HREF="#IDataSetFields">IDataSetFields</A> </DD>
<DD><A HREF="#IDataSetField">IDataSetField</A> </DD>
</DL>
<DL>
</DL>
<P><A HREF="#Query">Query </A> </P>
<DL>
<DD><A HREF="#IQueryField">IQueryField</A> </DD>
<DD><A HREF="#IQueryFields">IQueryFields</A> </DD>
</DL>
<DL>
</DL>
<P><A HREF="#ScriptManagement">Script Management </A> </P>
<DL>
<DD><A HREF="#IAddScriptElements">IAddScriptElements</A> </DD>
<DD><A HREF="#IScriptManager">IScriptManager</A> </DD>
<DD><A HREF="#IScriptComponent">IScriptComponent</A> </DD>
<DD><A HREF="#IXMLDisplay">IXMLDisplay</A> </DD>
</DL>
<DL>
</DL>
<P><A HREF="#ComponentEditor">Component Editor </A> </P>
<DL>
<DD><A HREF="#IWebComponentEditor">IWebComponentEditor</A> </DD>
<DD><A HREF="#IRestoreDefaults">IRestoreDefaults</A> </DD>
</DL>
<P> <A NAME="Required"><SPAN CLASS="intfgrouptitle">Required</SPAN></A></P>
<P><A NAME="IWebComponent"> <SPAN CLASS="intftitle"> IWebComponent</SPAN></A> 
</P>
<P>All children of TMidasPageProducer must support the IWebComponent interface.
This interface is used to define the positional and parent/child relationships
between components.</P>
<PRE>
  IWebComponent = interface
  ['{EB813782-EEAE-11D2-AFB0-00C04FB16EC3}']
    function GetIndex: Integer;
    procedure SetIndex(Value: Integer);
    procedure SetContainer(Container: TWebComponentContainer);
    function GetContainer: TWebComponentContainer;
    procedure SetComponentList(List: TObject);
    property Index: Integer read GetIndex write SetIndex;
    property Container: TWebComponentContainer read GetContainer 
      write SetContainer;
    property ComponentList: TObject write SetComponentList;
  end;
</PRE>

<P> <A NAME="HTMLContent"><SPAN CLASS="intfgrouptitle">HTML Content</SPAN></A> 
</P>
<P><A NAME="IWebContent"> <SPAN CLASS="intftitle"> IWebContent</SPAN></A> </P>
<P>InterfaceExpress components that provide HTML content must implement this
interface. Typically components call an implementation of ILayoutWebContent to
add HTML elements to the page. </P>
<PRE>
  IWebContent = interface
  ['{1B3E1CD1-DF59-11D2-AA45-00A024C11562}']
    function Content(Options: TWebContentOptions;
      ParentLayout: TLayout): string;
  end;
</PRE>

<P><A NAME="ILayoutWebContent"> <SPAN CLASS="intftitle">
ILayoutWebContent</SPAN></A> </P>
<P>Layout manager implement this interface. Layout managers are responsible for
arranging HTML elements on the page. The default layout manager arranges inputs
and labels using a TABLE element.</P>
<PRE>
  ILayoutWebContent = interface
  ['{4E810ED1-F09B-11D2-AA53-00A024C11562}']
    function LayoutButton(const HTMLButton: string; 
      Attributes: TLayoutAttributes): string;
    function LayoutField(const HTMLField: string; 
      Attributes: TLayoutAttributes): string;
    function LayoutLabelAndField(const HTMLLabel, HTMLField: string; 
      Attributes: TLayoutAttributes): string;
    function LayoutTable(const HTMLTable: string; 
      Attributes: TLayoutAttributes): string;
  end;
</PRE>

<P><A NAME="IHTMLForm"> <SPAN CLASS="intftitle"> IHTMLForm</SPAN></A> </P>
<P>Components that generated FORM elements implement this interface.</P>
<PRE>
  IHTMLForm = interface
  ['{394C5DD7-F252-11D2-AA55-00A024C11562}']
    function GetHTMLFormName: string;
    function GetHTMLFormVarName: string;
    property HTMLFormName: string read GetHTMLFormName;
    property HTMLFormVarName: string read GetHTMLFormVarName;
  end;
</PRE>

<P><A NAME="IHTMLField"> <SPAN CLASS="intftitle"> IHTMLField</SPAN></A> </P>
<P>Components that generate INPUT elements implement this interface</P>
<PRE>
  IHTMLField = interface
  ['{C72355D9-FE5C-11D2-AFC5-00C04FB16EC3}']
    function GetHTMLControlName: string;
    property HTMLControlName: string read GetHTMLControlName;
  end;
</PRE>

<P><A NAME="XMLDataAware"><SPAN CLASS="intfgrouptitle">XML Data
Aware</SPAN></A></P>
<P><A NAME="IDataSetComponent"> <SPAN CLASS="intftitle">
IDataSetComponent</SPAN></A> </P>
<P>Components that bind to an XMLBroker implement this interface.
<A HREF="ComponentsList?ClassName=TDataGrid">TDataGrid</A>and
<A HREF="ComponentsList?ClassName=TFieldGroup">TFieldGroup</A> are examples. 
</P>
<P> </P>
<PRE>
  IDataSetComponent = interface
  ['{D1AE355D-F1C3-11D2-AFB3-00C04FB16EC3}']
    function GetXMLBroker: TXMLBroker;
    function GetDataSet: IMidasWebDataSet;
    function GetXMLDataSet: TXMLDataSet;
    property DataSet: IMidasWebDataSet read GetDataSet;
    property XMLBroker: TXMLBroker read GetXMLBroker;
    property XMLDataSet: TXMLDataSet read GetXMLDataSet;
  end;
</PRE>

<P><A NAME="IDataSetFields"> <SPAN CLASS="intftitle"> IDataSetFields</SPAN></A>
</P>
<P>Components that contain data aware fields implement this interface.
<A HREF="ComponentsList?ClassName=TDataGrid">TDataGrid</A>and
<A HREF="ComponentsList?ClassName=TFieldGroup">TFieldGroup</A> are examples. 
</P>
<P> </P>
<PRE>
  IDataSetFields = interface
  ['{394C5DD4-F252-11D2-AA55-00A024C11562}']
    procedure ValidateDataSet;
    procedure GetFieldsList(AList: TStrings);
    function IsFieldInUse(AName: string): Boolean;
    function HasStatusField: Boolean;
    function GetVisibleFields: TWebComponentList;
    property VisibleFields: TWebComponentList read GetVisibleFields;
  end;
</PRE>

<P><A NAME="IDataSetField"> <SPAN CLASS="intftitle"> IDataSetField</SPAN></A> 
</P>
<P>Components that bind to field in field from IDataSetFields.GetFieldsList
implement this interface. <A
HREF="ComponentsList?ClassName=TFieldText">TFieldText</A> is an example. </P>
<PRE>
  IDataSetField = interface(IHTMLField)
  ['{394C5DD5-F252-11D2-AA55-00A024C11562}']
    procedure SetFieldName(AFieldName: string);
    function GetFieldName: string;
    function GetRowSetFieldAttributes(const FieldVarName: string): string;
    property FieldName: string read GetFieldName write SetFieldName;
  end;
</PRE>

<P><A NAME="Query"><SPAN CLASS="intfgrouptitle">Query</SPAN></A></P>
<P><A NAME="IQueryField"> <SPAN CLASS="intftitle"> IQueryField</SPAN></A> </P>
<P>Components that bind to field in IQueryFields.GetParmsList implement this
interface. <A
HREF="ComponentsList?ClassName=TQuerySelectOptions">TQuerySelectOptions</A> is
an example. </P>
<PRE>
  IQueryField = interface(IHTMLField)
  ['{7C321115-FCFB-11D2-AFC3-00C04FB16EC3}']
    function GetParamName: string;
    procedure SetParamName(AParamName: string);
    function GetText: string;
    procedure SetText(const Value: string);
    property ParamName: string read GetParamName write SetParamName;
    property Text: string read GetText write SetText;
  end;

</PRE>

<P><A NAME="IQueryFields"> <SPAN CLASS="intftitle"> IQueryFields</SPAN></A> 
</P>
<P>Components that contain query fields implement this interface.
<A HREF="ComponentsList?ClassName=TQueryFieldGroup">TQueryFieldGroup</A> is an
example.</P>
<PRE>
  IQueryFields = interface
  ['{DADD9F42-FD2B-11D2-AA78-00A024C11562}']
    procedure ValidateDataSet;
    function IsParamInUse(AName: string): Boolean;
    procedure GetParamsList(AList: TStrings);
  end;
</PRE>

<P><A NAME="ScriptManagement"><SPAN CLASS="intfgrouptitle">Script
Management</SPAN></A></P>
<P><A NAME="IAddScriptElements"> <SPAN CLASS="intftitle">
IAddScriptElements</SPAN></A> </P>
<P>Components call this interface to add JavaScript to the page.</P>
<PRE>
  IAddScriptElements = interface
  ['{2FF3A331-E790-11D2-AFA7-00C04FB16EC3}']
    function GetScriptManager: IScriptManager;
    function AddIncludeFile(FileName: string): Boolean;
    function AddRowSet(XMLProducer: TComponent; Path: TStrings): Boolean;
    function AddScriptBlock(Name: string; Script: string): Boolean;
    function AddHTMLBlock(Name: string; HTML: string): Boolean;
    function AddVar(Name: string; Script: string): Boolean;
    function AddFunction(Name: string; Body: string): Boolean;
    procedure AddError(Text: string);
    procedure AddPass(Event: TAddScriptElementsEvent; Data: Pointer);
    procedure AddScriptComponents(List: TObject);
    property ScriptManager: IScriptManager read GetScriptManager;
  end;
</PRE>

<P><A NAME="IScriptManager"> <SPAN CLASS="intftitle"> IScriptManager</SPAN></A>
</P>
<P>Components call this interface to find out about the JavaScript that has
been added to the page by other components.</P>
<PRE>
  IScriptManager = interface
  ['{94B8B14E-E6D6-11D2-AFA6-00C04FB16EC3}']
    function GetXMLDocuments: IXMLDocuments;
    function GetIncludeFiles: IIncludeFiles;
    function GetFunctions: IFunctions;
    function GetWarnings: TStrings;
    function GetScriptBlocks: IScriptBlocks;
    function GetVars: IVars;
    function GetHTMLBlocks: IHTMLBlocks;
    function GetOptions: TWebContentOptions;
    function GetAddElementsIntf: IAddScriptElements;
    procedure AddError(const Error: string);
    property XMLDocuments: IXMLDocuments read GetXMLDocuments;
    property IncludeFiles: IIncludeFiles read GetIncludeFiles;
    property Warnings: TStrings read GetWarnings;
    property Functions: IFunctions read GetFunctions;
    property Vars: IVars read GetVars;
    property ScriptBlocks: IScriptBlocks read GetScriptBlocks;
    property HTMLBlocks: IHTMLBlocks read GetHTMLBlocks;
    property Options: TWebContentOptions read GetOptions;
    property AddElementsIntf: IAddScriptElements 
      read GetAddElementsIntf;
  end;
</PRE>

<P><A NAME="IScriptComponent"> <SPAN CLASS="intftitle">
IScriptComponent</SPAN></A> </P>
<P>Components that generated JavaScript implement this interface.</P>
<PRE>
  IScriptComponent = interface
  ['{1B9B0962-D28E-11D2-AF8A-00C04FB16EC3}']
    procedure AddElements(AddIntf: IAddScriptElements);
    function GetSubComponents: TObject; 
    property SubComponents: TObject read GetSubComponents;
  end;
</PRE>

<P><A NAME="IXMLDisplay"> <SPAN CLASS="intftitle"> IXMLDisplay</SPAN></A> </P>
<P>Components that define XMLRowSets implement this interface so that child
components can retrieve information about the RowSet.</P>
<PRE>
  IXMLDisplay = interface
  ['{394C5DD6-F252-11D2-AA55-00A024C11562}']
    function GetXMLDisplayName: string;
    function GetXMLRowSetName: string;
    function GetIsMultipleRecordView: Boolean;
    property XMLRowSetName: string read GetXMLRowSetName;
    property XMLDisplayName: string read GetXMLDisplayName;
    property IsMultipleRecordView: Boolean 
      read GetIsMultipleRecordView;
  end;
</PRE>

<P><A NAME="ComponentEditor"><SPAN CLASS="intfgrouptitle">Component
Editor</SPAN></A></P>
<P><A NAME="IWebComponentEditor"> <SPAN CLASS="intftitle">
IWebComponentEditor</SPAN></A> </P>
<P>Container components implement this interface so that the component editor
can determine the child classes that are valid children.</P>
<PRE>
  IWebComponentEditor = interface
  ['{13F59F61-EF85-11D2-AFB1-00C04FB16EC3}']
    function CanAddClass(AParent: TComponent; AClass: TClass): Boolean;
  end;
</PRE>

<P><A NAME="IRestoreDefaults"> <SPAN CLASS="intftitle">
IRestoreDefaults</SPAN></A> </P>
<P>Components that support the restore defaults command implement this
interface.</P>
<PRE>
  IRestoreDefaults = interface
  ['{394C5DD3-F252-11D2-AA55-00A024C11562}']
    procedure RestoreDefaults;
  end;
</PRE>
</BODY>

</HTML>

